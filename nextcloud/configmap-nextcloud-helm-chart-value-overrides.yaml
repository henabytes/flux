apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud-helm-chart-value-overrides
  namespace: nextcloud
data:
  values.yaml: |-
    ## Official nextcloud image version
    ## ref: https://hub.docker.com/r/library/nextcloud/tags/
    ##
    image:
      repository: nextcloud
      # tag: 24.0.3-apache
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName

    nameOverride: ""
    fullnameOverride: ""
    podAnnotations: {}
    deploymentAnnotations: {}
    deploymentLabels: {}

    # Number of replicas to be deployed
    replicaCount: 1

    ## Allowing use of ingress controllers
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##
    ingress:
      enabled: true
      # className: nginx
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: nextcloud-nextcloud-redirectregex@kubernetescrd,nextcloud-nextcloud-headers@kubernetescrd
      #  nginx.ingress.kubernetes.io/proxy-body-size: 4G
      #  kubernetes.io/tls-acme: "true"
      #  cert-manager.io/cluster-issuer: letsencrypt-prod
      #  nginx.ingress.kubernetes.io/server-snippet: |-
      #    server_tokens off;
      #    proxy_hide_header X-Powered-By;

      #    rewrite ^/.well-known/webfinger /public.php?service=webfinger last;
      #    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      #    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
      #    location = /.well-known/carddav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /.well-known/caldav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /robots.txt {
      #      allow all;
      #      log_not_found off;
      #      access_log off;
      #    }
      #    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
      #      deny all;
      #    }
      #    location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
      #      deny all;
      #    }
      tls:
        - secretName: letsencrypt-wildcard-cert-henabytes.com-staging
          hosts:
            - nextcloud.henabytes.com
      labels: {}
      path: /
      pathType: Prefix


    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle: {}
      # postStartCommand: []
      # preStopCommand: []

    phpClientHttpsFix:
      enabled: false
      protocol: https

    nextcloud:
      host: nextcloud.henabytes.com
      username: admin
      password: changeme
      ## Use an existing secret
      existingSecret:
        enabled: false
        # secretName: nameofsecret
        # usernameKey: nextcloud-username
        # passwordKey: nextcloud-password
        # tokenKey: nextcloud-token
        # smtpUsernameKey: smtp-username
        # smtpPasswordKey: smtp-password
      update: 0
      # If web server is not binding default port, you can define it
      # containerPort: 8080
      datadir: /var/www/html/data
      persistence:
        subPath:
      mail:
        enabled: false
        fromAddress: user
        domain: domain.com
        smtp:
          host: domain.com
          secure: ssl
          port: 465
          authtype: LOGIN
          name: user
          password: pass
      # PHP Configuration files
      # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
      phpConfigs: {}
      # Default config files
      # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
      # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
      defaultConfigs:
        # To protect /var/www/html/config
        .htaccess: true
        # Redis default configuration
        redis.config.php: false
        # Apache configuration for rewrite urls
        apache-pretty-urls.config.php: true
        # Define APCu as local cache
        apcu.config.php: true
        # Apps directory configs
        apps.config.php: true
        # Used for auto configure database
        autoconfig.php: true
        # SMTP default configuration
        smtp.config.php: true
      # Extra config files created in /var/www/html/config/
      # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
      configs:
        custom.config.php: |-
          <?php
          $CONFIG = array (
            'overwriteprotocol' => 'https',
            'overwrite.cli.url' => 'https://nextcloud.henabytes.com',
            'filelocking.enabled' => 'true',
            'loglevel' => '2',
            'enable_previews' => true,
            'trusted_domains' =>
              [
                'nextcloud',
                'nextcloud.henabytes.com'
              ]
          );

        proxy.config.php: |-
          <?php
          $CONFIG = array(
            'trusted_proxies' => array(
              0 => '127.0.0.1',
              1 => '10.0.0.0/8',
            ),
            'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
          );

        redis.config.php: |-
          <?php
          $CONFIG = array(
            'memcache.distributed' => '\OC\Memcache\Redis',
            'memcache.locking' => '\OC\Memcache\Redis',
            'redis' => array(
              'host' => 'redis-master-0.redis-headless.redis.svc.cluster.local',
              'port' => 6379,
              'password' => getenv('REDIS_HOST_PASSWORD')
            )
          );

        # For example, to use S3 as primary storage
        # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
        #
        #  configs:
        s3.config.php: |-
          <?php
          $CONFIG = array(
            'objectstore' => array(
              'class' => '\\OC\\Files\\ObjectStore\\S3',
              'arguments' => array(
                'bucket'         => 'nextcloud',
                'hostname'       => 'rook-ceph-rgw-ceph-objectstore.rook-ceph.svc',
                'port'           => 80,
                'autocreate'     => true,
                'key'            => getenv('BUCKET_ACCESS_KEY'),
                'secret'         => getenv('BUCKET_ACCESS_SECRET'),
                'use_ssl'        => false,
                'use_path_style' => true
              )
            )
          );

      ## Strategy used to replace old pods
      ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
      ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
      strategy:
        type: Recreate
        # type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 1
        #   maxUnavailable: 0

      ##
      ## Extra environment variables
      extraEnv:
        - name: REDIS_HOST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth-password
              key: secret
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: nextcloud-object-bucket
              key: AWS_ACCESS_KEY_ID
        - name: BUCKET_ACCESS_SECRET
          valueFrom:
            secretKeyRef:
              name: nextcloud-object-bucket
              key: AWS_SECRET_ACCESS_KEY

      # Extra init containers that runs before pods start.
      extraInitContainers: []
      #  - name: do-something
      #    image: busybox
      #    command: ['do', 'something']

      # Extra sidecar containers.
      extraSidecarContainers: []
        - name: nextcloud-logger
          image: busybox
          command: [/bin/sh, -c, 'while ! test -f "/run/nextcloud/data/nextcloud.log"; do sleep 1; done; tail -n+1 -f /run/nextcloud/data/nextcloud.log']
          volumeMounts:
          - name: nextcloud-data
            mountPath: /run/nextcloud/data

      # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
      # to NextCloud pods in Kubernetes. This can then be configured in External Storage
      extraVolumes:
      #  - name: nfs
      #    nfs:
      #      server: "10.0.0.1"
      #      path: "/nextcloud_data"
      #      readOnly: false
      extraVolumeMounts:
      #  - name: nfs
      #    mountPath: "/legacy_data"

      # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}
      #   runAsUser: "33"
      #   runAsGroup: "33"
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

      # Set securityContext parameters for the pod. For example, you may need to define runAsNonRoot directive
      podSecurityContext: {}
      #   runAsUser: "33"
      #   runAsGroup: "33"
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    nginx:
      ## You need to set an fpm version of the image for nextcloud if you want to use nginx!
      enabled: false
      image:
        repository: nginx
        tag: alpine
        pullPolicy: IfNotPresent

      config:
        # This generates the default nginx config as per the nextcloud documentation
        default: true
        # custom: |-
        #     worker_processes  1;..

      resources: {}

      # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}
      #   runAsUser: "82"
      #   runAsGroup: "33"
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    internalDatabase:
      enabled: false
      name: nextcloud

    ##
    ## External database configuration
    ##
    externalDatabase:
      enabled: true

      ## Supported database engines: mysql or postgresql
      type: postgresql

      ## Database host
      host: postgresql.nextcloud.svc.cluster.local

      ## Database user
      user: nextcloud

      ## Database password
      password:

      ## Database name
      database: nextcloud

      ## Use a existing secret
      existingSecret:
        enabled: true
        secretName: nextcloud-postgres-auth-passwords
        usernameKey: db-username
        passwordKey: user

    ##
    ## MariaDB chart configuration
    ##
    mariadb:
      ## Whether to deploy a mariadb server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
      enabled: false

      auth:
        database: nextcloud
        username: nextcloud
        password: changeme

      architecture: standalone

      ## Enable persistence using Persistent Volume Claims
      ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
      ##
      primary:
        persistence:
          enabled: false
          # Use an existing Persistent Volume Claim (must be created ahead of time)
          # existingClaim: ""
          # storageClass: ""
          accessMode: ReadWriteOnce
          size: 8Gi

    ##
    ## PostgreSQL chart configuration
    ## for more options see https://github.com/bitnami/charts/tree/master/bitnami/postgresql
    ##
    postgresql:
      enabled: false
      global:
        postgresql:
          auth:
            username: nextcloud
            password: changeme
            database: nextcloud
      primary:
        persistence:
          enabled: false
          # Use an existing Persistent Volume Claim (must be created ahead of time)
          # existingClaim: ""
          # storageClass: ""

    ##
    ## Redis chart configuration
    ## for more options see https://github.com/bitnami/charts/tree/master/bitnami/redis
    ##

    redis:
      enabled: false
      auth:
        enabled: true
        password: 'changeme'

    ## Cronjob to execute Nextcloud background tasks
    ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
    ##
    cronjob:
      annotations: {}
      curlInsecure: false
      enabled: true
      failedJobsHistoryLimit: 5
      image: {}
      schedule: '*/5 * * * *'
      successfulJobsHistoryLimit: 2

      # Allow configuration of lifecycle hooks
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
      lifecycle: {}
        # postStartCommand: []
        # preStopCommand: []
      # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}
      #   runAsUser: "33"
      #   runAsGroup: "33"
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    service:
      type: ClusterIP
      port: 8080
      loadBalancerIP: nil
      nodePort: nil

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      # Nextcloud Data (/var/www/html)
      enabled: true
      annotations: {}
      ## nextcloud data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: "ceph-block"

      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      # existingClaim:

      accessMode: ReadWriteOnce
      size: 8Gi

      ## Use an additional pvc for the data directory rather than a subpath of the default PVC
      ## Useful to store data on a different storageClass (e.g. on slower disks)
      nextcloudData:
        enabled: false
        subPath:
        annotations: {}
        # storageClass: "-"
        # existingClaim:
        accessMode: ReadWriteOnce
        size: 8Gi

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1


    ## Enable pod autoscaling using HorizontalPodAutoscaler
    ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    ##
    hpa:
      enabled: false
      cputhreshold: 60
      minPods: 1
      maxPods: 10

    nodeSelector: {}

    tolerations: []

    affinity: {}


    ## Prometheus Exporter / Metrics
    ##
    metrics:
      enabled: false

      replicaCount: 1
      # The metrics exporter needs to know how you serve Nextcloud either http or https
      https: false
      # Use API token if set, otherwise fall back to password authentication
      # https://github.com/xperimental/nextcloud-exporter#token-authentication
      # Currently you still need to set the token manually in your nextcloud install
      token: ""
      timeout: 5s
      # if set to true, exporter skips certificate verification of Nextcloud server.
      tlsSkipVerify: false

      image:
        repository: xperimental/nextcloud-exporter
        tag: 0.6.0
        pullPolicy: IfNotPresent

      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      # resources: {}

      ## Metrics exporter pod Annotation and Labels
      # podAnnotations: {}

      # podLabels: {}

      service:
        type: ClusterIP
        ## Use serviceLoadBalancerIP to request a specific static IP,
        ## otherwise leave blank
        # loadBalancerIP:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9205"
        labels: {}

      ## Prometheus Operator ServiceMonitor configuration
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
        ##
        enabled: false

        ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
        ##
        namespace: ""

        ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
        ##
        jobLabel: ""

        ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        interval: 30s

        ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        scrapeTimeout: ""

        ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
        ##
        labels: {}


    rbac:
      enabled: false
      serviceaccount:
        create: true
        name: nextcloud-serviceaccount
        annotations: {}


    ## @param securityContext @deprecated Use `nextcloud.podSecurityContext` instead
    securityContext: {}
